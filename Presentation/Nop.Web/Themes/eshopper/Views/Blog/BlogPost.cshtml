@model BlogPostModel
@using Nop.Web.Models.Blogs;
@{
    Layout = "_ColumnsTwo";
    //title
    NopHtml.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
}
@section left {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_before" })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_blog_archive" })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_after" })
}
<div class="features_items custom-blog-page">
    <!--features_items-->
    <h2 class="title text-center">@Model.Title</h2>
    <div class="product-details">
        <div class="custom-page-box-div">
            <div class="post-meta">
                <ul class="sinlge-post-meta">
                    <li><i class="fa fa-clock-o"></i> @Model.CreatedOn.ToString("T")</li>
                    <li><i class="fa fa-calendar"></i> @Model.CreatedOn.ToString("D")</li>
                </ul>
            </div>
            <p>@Html.Raw(Model.Body)</p>
            @if (Model.Tags.Count > 0)
            {
                <div class="tag pull-right">
                    <label><strong>@T("Blog.Tags"):</strong></label>

                    @for (int i = 0; i < Model.Tags.Count; i++)
                    {
                        var tag = Model.Tags[i];
                        <a class="color" style="color: orange" href="@Url.RouteUrl("BlogByTag", new {tag = tag})">@tag</a>
                        if (i != Model.Tags.Count - 1)
                        {
                            <span class="separator">/</span>
                        }
                    }

                </div>
            }

            @if (Model.AllowComments)
            {
                <div class="">
                    <div class="space15px">&nbsp;</div>

                    <div class="blog-comment-notifications">
                        <div class="message-error">@Html.ValidationSummary(true)</div>
                        @{
                            var result = TempData["nop.blog.addcomment.result"] as string;
                        }
                        @if (!String.IsNullOrEmpty(result))
                        {
                            <div class="alert alert-success square-box result">@result</div>
                        }
                    </div>

                    @if (Model.Comments.Count > 0)
                    {
                        <div class="fieldset">
                            <div id="legend">
                                <legend>@T("Blog.Comments")</legend>
                            </div>

                        </div>
                        foreach (var comment in Model.Comments)
                        {
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="blog-post-area">
                                        <div class="single-blog-post">
                                            <div class="post-meta">
                                                <ul>
                                                    <li><i class="fa fa-user"></i>@(comment.CustomerName)</li>
                                                    <li><i class="fa fa-clock-o"></i>  @Model.CreatedOn.ToString("T")</li>
                                                    <li><i class="fa fa-calendar"></i>  @Model.CreatedOn.ToString("D")</li>
                                                </ul>
                                            </div>
                                            <p class="comment-text">@Html.Raw(htmlFormatter.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        <div class="fieldset">
                            <div id="legend">
                                <legend>@T("News.Comments.LeaveYourComment")</legend>
                            </div>
                        </div>
                        <div class="">
                            <div class="row">
                                @Html.LabelFor(model => model.AddNewComment.CommentText, new { @class = "col-md-2" })
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.AddNewComment.CommentText, new { @class = "gray-textarea", rows = "10" })
                                </div>
                                <div class="col-md-offset-2 col-md-4">
                                    @Html.ValidationMessageFor(model => model.AddNewComment.CommentText)
                                </div>
                            </div>
                            @if (Model.AddNewComment.DisplayCaptcha)
                            {
                                <nop-captcha />
                            }
                        </div>
                        <div class="row">
                            <div class="">
                                <div class="pull-right col-md-3">
                                    <input type="submit" name="add-comment" class="btn btn-primary" value="@T("Blog.Comments.SubmitButton")" />

                                </div>
                            </div>
                        </div>

                    }
                </div>
             }
        </div>
    </div>
</div>