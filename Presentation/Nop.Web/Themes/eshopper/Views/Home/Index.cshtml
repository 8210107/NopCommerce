@{
    Layout = "_ColumnsOne";

    //page class
    NopHtml.AppendPageCssClassParts("html-home-page");
}

@{
    //current category ID
    int currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    int currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    int currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}





<div class="page home-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_top" }) 

        @await  Html.PartialAsync("_HomePageTopSlider")
       <br> <br> <br>
        <div class="container">

            <div class="row">
                <div class="col-lg-3 col-md-4 col-sm-4">
                    <div class="left-sidebar">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
                        @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                        @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })
                        @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                        @await Component.InvokeAsync("VendorNavigation")
                        @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
                        @await Component.InvokeAsync("PopularProductTags")
                        @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                        @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })
                    </div>

                </div>
                <div class="col-lg-9 col-md-8 col-sm-8">
                    <!--   @await Component.InvokeAsync("TopicBlock", new { systemName = "HomePageText" })-->
                           @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_before_categories" }) 
                    @await Component.InvokeAsync("HomepageCategories")
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_before_products" })
                    @await Component.InvokeAsync("HomepageProducts")
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_before_best_sellers" })
                    @await Component.InvokeAsync("HomepageBestSellers")
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_before_news" })
                    @await Component.InvokeAsync("HomepageNews")
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_before_poll" })
                    @await Component.InvokeAsync("HomepagePolls")
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_bottom" })
                </div>
            </div>

        </div>
    </div>
</div>