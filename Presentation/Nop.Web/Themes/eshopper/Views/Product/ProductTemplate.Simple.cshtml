@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Microsoft.AspNetCore.Http.Extensions
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsTwo";


    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}

<!--product breadcrumb-->
@await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)



<div class="features_items">
    <!--features_items-->
    <h2 class="title text-center">@Model.Name</h2>

    <div class="product-details">
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="row product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                    <!--product pictures-->


                    <div class="col-md-5">
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                    </div>

                    <div class="col-md-7 overview ">
                        <div class="product-information">
                            @if (!String.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Model.ShortDescription
                                </div><br />
                            }
                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            <!--price & add to cart-->
                            @{
                                var dataDictPrice = new ViewDataDictionary(ViewData);
                                dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            }
                            <!--product SKU, manufacturer part number, stock info-->
                            @await Html.PartialAsync("_SKU_Man_Stock", Model)
                            <!--Back in stock subscription-->
                            @await Html.PartialAsync("_BackInStockSubscription", Model)
                            <!--product manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                            <!--delivery-->
                            @await Html.PartialAsync("_DeliveryInfo", Model)
                            <!--sample download-->
                            @await Html.PartialAsync("_DownloadSample", Model)


                            <!--attributes-->
                            @{
                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                                @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                            }
                            <!--gift card-->
                            @{
                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                                @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                            }
                            <!-- estimate shipping-->
                            @{

                                @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                            }
                        <div class="form-group row">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                           
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)

                            @await Html.PartialAsync("_CompareProductsButton", Model)
                        </div>
                            @await Html.PartialAsync("_ShareButton", Model)

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="category-tab shop-details-tab">
                        <!--category-tab-->
                        <div class="col-sm-12">
                            <ul class="nav nav-tabs">
                                @if (!String.IsNullOrEmpty(Model.FullDescription))
                                {

                                <li class="active"><a href="#description" data-toggle="tab">Description</a></li>
                                }
                                @if (!String.IsNullOrEmpty(@Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel).ToString()))
                                {

                                <li><a href="#specification" data-toggle="tab">Specifications</a></li>
                                }
                                @if (!String.IsNullOrEmpty(@Html.PartialAsync("_ProductTags", Model.ProductTags).ToString()))
                                {
                                <li><a href="#tags" data-toggle="tab">Products Tags</a></li>
                                }
                            </ul>
                        </div>
                        <div class="tab-content">
                            @if (!String.IsNullOrEmpty(Model.FullDescription))
                            {
                            <div class="full-description tab-pane fade active in" id="description" itemprop="description">
                                <div class="custom-page-box-border-less-div">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            </div>

                            }
                            @if (!String.IsNullOrEmpty(@Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel).ToString()))
                            {
                            <div class="full-description fade tab-pane" id="specification">
                                <div class="custom-page-box-border-less-div">
                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                                </div>
                            </div>
                            }
                            @if (!String.IsNullOrEmpty(@Html.PartialAsync("_ProductTags", Model.ProductTags).ToString()))
                            {
                            <div class="full-description fade tab-pane" id="tags">
                                <div class="custom-page-box-border-less-div">
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>

                            </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>


<div class="product-collateral">
    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
</div>
