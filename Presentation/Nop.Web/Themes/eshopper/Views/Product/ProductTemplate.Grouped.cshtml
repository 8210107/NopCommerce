@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Nop.Web.Models.Catalog;
@using Microsoft.AspNetCore.Http.Extensions
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddHeadCustomParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
<!--product breadcrumb-->
@await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)



<div class="features_items">
    <!--features_items-->
    <h2 class="title text-center">@Model.Name</h2>
    @await Html.PartialAsync("_Discontinued", Model)

    <div class="product-details">
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures" })
                    <!--product pictures-->
                    <div class="row">


                        <div class="col-md-5">
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures" })
                        </div>
                        <div class="col-md-7 overview">
                            <div class="product-information">
                                @if (!String.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description">
                                        @Model.ShortDescription
                                    </div><br />
                                }

                                <!--product manufacturers-->
                                @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                <div class="form-group row">
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                </div>


                                @await Html.PartialAsync("_ShareButton", Model)

                            </div>

                            
                        </div>

                    </div>

                </div>


                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral" })
                <div class="product-collateral">
                    <!--associated products-->
                    <div class="product-variant-list">
                        <div class="row">


                            @foreach (var variant in Model.AssociatedProducts)
                            {


                                <div class=" col-md-5 custom-page-box-div" data-productid="@variant.Id">
                                    @if (!String.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                    {
                                        <div class="variant-picture">
                                            <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                                 title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                        </div>
                                    }
                                <div class="variant-overview">
                                    @if (!String.IsNullOrWhiteSpace(variant.Name))
                                    {
                                        <div class="variant-name">
                                            @variant.Name
                                        </div>
                                    }
                                    @if (!String.IsNullOrWhiteSpace(variant.ShortDescription))
                                    {
                                        <div class="variant-description">
                                            @variant.ShortDescription
                                        </div>
                                    }
                                    @await Html.PartialAsync("_DownloadSample", variant)
                                    <!--attributes-->
                                    @{
                                        var dataDictAttributes = new ViewDataDictionary(ViewData);
                                        dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", variant.Id);
                                        @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                    }
                                    <!--product SKU, manufacturer part number, stock info-->
                                    @await Html.PartialAsync("_SKU_Man_Stock", variant)
                                    <!--delivery-->
                                    @await Html.PartialAsync("_DeliveryInfo", variant)
                                    <!--Back in stock subscription-->
                                    @await Html.PartialAsync("_BackInStockSubscription", variant)
                                    <!--gift card-->
                                    @{
                                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", variant.Id);
                                        @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                    }
                                    <!--rental info-->
                                    @{
                                        var dataDictRental = new ViewDataDictionary(ViewData);
                                        dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                        @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                    }
                                    <!--price & add to cart-->
                                    @{
                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", variant.Id);
                                        @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                    }
                                    <!--price breaks-->
                                    @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                                    @{
                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", variant.Id);
                                        @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                    }
                                    <!--estimate shipping-->
                                    @{
                                        var dataDictEstimateShipping = new ViewDataDictionary(ViewData);
                                        dataDictEstimateShipping.TemplateInfo.HtmlFieldPrefix = $"estimate_shipping_{variant.Id}";
                                        @await Html.PartialAsync("_ProductEstimateShipping", variant.ProductEstimateShipping, dataDictEstimateShipping)
                                    }

                                </div>
                                </div>


                            }
                        </div>


                        @if (Model.AssociatedProducts.Count == 0)
                        {
                            <div class="no-associated-products">
                                @T("Products.NoAssociatedProducts")
                            </div>
                        }
                    </div>

                    <div class="category-tab shop-details-tab">
                        <!--category-tab-->
                        <div class="col-sm-12">
                            <ul class="nav nav-tabs">
                                @if (!String.IsNullOrEmpty(Model.FullDescription))
                                {

                                    <li class="active"><a href="#description" data-toggle="tab">Description</a></li>
                                }
                                @if (!String.IsNullOrEmpty(@Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel).ToString()))
                                {

                                    <li><a href="#specification" data-toggle="tab">Specifications</a></li>
                                }
                                @if (!String.IsNullOrEmpty(@Html.PartialAsync("_ProductTags", Model.ProductTags).ToString()))
                                {
                                    <li><a href="#tags" data-toggle="tab">Products Tags</a></li>
                                }
                            </ul>
                        </div>
                        <div class="tab-content">
                            @if (!String.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description tab-pane fade active in" id="description" itemprop="description">
                                    <div class="custom-page-box-border-less-div">
                                        @Html.Raw(Model.FullDescription)
                                    </div>

                                </div>

                            }
                            <div class="full-description fade tab-pane" id="specification">
                                <div class="custom-page-box-border-less-div">
                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                                </div>


                            </div>

                            <div class="full-description fade tab-pane" id="tags">
                                <div class="custom-page-box-border-less-div">
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>

                            </div>



                        </div>
                    </div>





                </div>

            </div>

        </form>

    </div>
</div>



<div class="product-collateral">
    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
</div>

