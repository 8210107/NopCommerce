@model RegisterModel
@using Nop.Web.Extensions
@using Nop.Web.Models.Customer;
@using System.Text.Encodings.Web
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Register").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-registration-page");
}

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript" asp-location="Footer">
        $(document).ready(function () {
            $("#@Html.IdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.IdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}



@*@Html.AntiForgeryToken()*@
<div class="panel panel-default form-panel">
    <div class="panel-heading">
        <h3>@T("Account.Register")</h3>
    </div>
    <div class="panel-body">
        <form asp-route="Register" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
            <div class="message-error">
                @Html.ValidationSummary(true)
            </div>

            <div class="fieldset">
                <div id="legend">
                    <legend class="">@T("Account.YourPersonalDetails")</legend>
                </div>
                @if (Model.GenderEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-2 control-label">@T("Account.Fields.Gender"):</label>
                        <div class="col-md-9">
                            @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                            <label class="forcheckbox  class=" col-md-2 control-label"" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                            @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                            <label class="forcheckbox  class=" col-md-2 control-label"" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                        </div>
                    </div>
                }
                <div class="form-group row">
                    @Html.LabelFor(model => model.FirstName, new { @class = "col-md-2 control-label" })
                    <div class="col-md-6 required-star">
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                        <nop-required />
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>

                </div>
                <div class="form-group row">
                    @Html.LabelFor(model => model.LastName, new { @class = "col-md-2 control-label" })
                    <div class="col-md-6 required-star">
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                        <nop-required />
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>

                </div>

                @if (Model.DateOfBirthEnabled)
                {
                    <div class="inputs date-of-birth">
                        <label>@T("Account.Fields.DateOfBirth"):</label>
                         <nop-date-picker asp-day-name="@Html.NameFor(x => x.DateOfBirthDay)"
                                             asp-month-name="@Html.NameFor(x => x.DateOfBirthMonth)"
                                             asp-year-name="@Html.NameFor(x => x.DateOfBirthYear)"
                                             asp-begin-year="@(DateTime.Now.AddYears(-110))"
                                             asp-end-year="@(DateTime.UtcNow)"
                                             asp-selected-date="@Model.ParseDateOfBirth()" />

                        @if (Model.DateOfBirthRequired)
                        {
                            <nop-required />
                        }
                        <span asp-validation-for="DateOfBirthDay"></span>
                        <span asp-validation-for="DateOfBirthMonth"></span>
                        <span asp-validation-for="DateOfBirthYear"></span>
                    </div>
                }

                <div class="form-group row">
                    @Html.LabelFor(model => model.Email, new { @class = "col-md-2 control-label" })
                    <div class="col-md-6 required-star">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        <nop-required />
                    </div>
                    <div class="col-md-4">
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>
                @if (Model.UsernamesEnabled)
                {
                    <div class="form-group row">
                        @Html.LabelFor(model => model.Username, new { @class = "col-md-2 control-label" })
                        <div class="col-md-6 required-star">
                            @Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
                             <nop-required />
                        </div>
                        <div class="col-md-4">
                           
                            @Html.ValidationMessageFor(model => model.Username)
                            @if (Model.CheckUsernameAvailabilityEnabled)
                            {
                                @Html.Partial("_CheckUsernameAvailability")
                            }
                        </div>
                    </div>

                }
            </div>

            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend class="">@T("Account.CompanyDetails")</legend>
                    </div>
                    <div class="form-fields">
                        @if (Model.CompanyEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Company, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })
                                    @if (Model.CompanyRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.Company)
                                </div>
                            </div>
                        }
                        @if (Model.DisplayVatNumber)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.VatNumber, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.VatNumber, new { @class = "form-control" })
                                </div>
                                <div class="col-md-4">
                                    <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
           || Model.CityEnabled || Model.CountryEnabled)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend class="">@T("Account.YourAddress")</legend>
                    </div>
                    <div class="form-fields">
                        @if (Model.StreetAddressEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.StreetAddress, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.StreetAddress, new { @class = "form-control" })
                                    @if (Model.StreetAddressRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.StreetAddress)
                                </div>
                            </div>
                        }
                        @if (Model.StreetAddress2Enabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.StreetAddress2, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.StreetAddress2, new { @class = "form-control" })
                                    @if (Model.StreetAddress2Required)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                                </div>
                            </div>
                        }
                        @if (Model.ZipPostalCodeEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.ZipPostalCode, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.ZipPostalCode, new { @class = "form-control" })
                                    @if (Model.ZipPostalCodeRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.ZipPostalCode)
                                </div>
                            </div>
                        }
                        @if (Model.CityEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.City, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.City, new { @class = "form-control" })
                                    @if (Model.CityRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.City)
                                </div>
                            </div>
                        }
                        @if (Model.CountryEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.CountryId, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6">
                                    @Html.DropDownList("CountryId", Model.AvailableCountries, new { @class = "form-control" })
                                </div>
                            </div>
                        }
                        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.StateProvinceId, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6">
                                    @Html.DropDownList("StateProvinceId", Model.AvailableStates, new { @class = "form-control" })
                                    <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait")</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend class="">@T("Account.YourContactInformation")</legend>
                    </div>
                    <div class="form-fields">
                        @if (Model.PhoneEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Phone, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                                    @if (Model.PhoneRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.Phone)
                                </div>
                            </div>
                        }
                        @if (Model.FaxEnabled)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Fax, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6 required-star">
                                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control" })
                                    @if (Model.FaxRequired)
                                    {
                                        <nop-required />
                                    }
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.Fax)
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend class="">@T("Account.Options")</legend>
                    </div>
                    <div class="form-fields">
                        @if (Model.NewsletterEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(model => model.Newsletter)
                                @Html.EditorFor(model => model.Newsletter)
                                @Html.ValidationMessageFor(model => model.Newsletter)
                            </div>
                        }
                        @if (Model.CustomerAttributes.Count > 0)
                        {
                            @await Html.PartialAsync("_CustomerAttributes", Model.CustomerAttributes)
                        }
                    </div>
                </div>
            }
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="fieldset">
                    <div id="legend">
                        <legend class="">@T("Account.Preferences")</legend>
                    </div>
                    <div class="form-fields">
                        @if (Model.AllowCustomersToSetTimeZone)
                        {
                            <div class="form-group row">
                                @Html.LabelFor(model => model.TimeZoneId, new { @class = "col-md-2 control-label" })
                                <div class="col-md-6">
                                    @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones, new { @class = "form-control" })
                                </div>
                                <div class="col-md-4">
                                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            <div class="fieldset">
                <div id="legend">
                    <legend class="">@T("Account.YourPassword")</legend>
                </div>
                <div class="form-fields">
                    <div class="form-group row">
                        @Html.LabelFor(model => model.Password, new { @class = "col-md-2 control-label" })
                        <div class="col-md-6 required-star">
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", Type = "password" })
                            <nop-required />
                        </div>
                        <div class="col-md-4">
                            @Html.ValidationMessageFor(model => model.Password)
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-md-2 control-label" })
                        <div class="col-md-6 required-star">
                            @Html.TextBoxFor(model => model.ConfirmPassword, new { @class = "form-control", Type = "password" })
                            <nop-required />
                        </div>
                        <div class="col-md-4">
                            @Html.ValidationMessageFor(model => model.ConfirmPassword)
                        </div>
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <nop-captcha />
                    }
                </div>
            </div>
            @if (Model.AcceptPrivacyPolicyEnabled || Model.GdprConsents.Count > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.UserAgreement")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.AcceptPrivacyPolicyEnabled)
                        {
                            <script asp-location="Footer">
                            $(document).ready(function() {
                                $('#register-button').on('click', function() {
                                    if ($('#accept-consent').is(':checked')) {
                                        //do some stuff
                                        return true;
                                    } else {
                                        //just show validation errors, don't post
                                        alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                        return false;
                                    }
                                });
                            });
                            </script>
                            <div class="inputs accept-consent">
                                <input id="accept-consent" type="checkbox" name="accept-consent" />
                                <label for="accept-consent">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                                @if (Model.AcceptPrivacyPolicyPopup)
                                {
                                    <span class="read" id="read-privacyinfo">@T("Account.Fields.AcceptPrivacyPolicy.Read")</span>
                                    <script asp-location="Footer">
                                $(document).ready(function() {
                                    $('#read-privacyinfo').on('click',
                                        function(e) {
                                            displayPopupContentFromUrl(
                                                '@Url.RouteUrl("TopicPopup", new {SystemName = "privacyinfo"})',
                                                '@T("Account.Fields.AcceptPrivacyPolicy")');
                                        });
                                });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-privacyinfo" href="@Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("privacyinfo") })">@T("Account.Fields.AcceptPrivacyPolicy.Read")</a>
                                }
                            </div>
                        }

                        @if (Model.GdprConsents.Count > 0)
                        {
                            foreach (var consent in Model.GdprConsents)
                            {
                                if (consent.IsRequired)
                                {
                                    <script asp-location="Footer">
                                $(document).ready(function() {
                                    $('#register-button').on('click', function() {
                                        if ($('#consent@(consent.Id)').is(':checked')) {
                                                //do some stuff
                                                return true;
                                            } else {
                                                //just show validation errors, don't post
                                            alert('@Html.Raw(JavaScriptEncoder.Default.Encode(consent.RequiredMessage))');
                                                return false;
                                            }
                                        });
                                });
                                    </script>
                                }
                                <div class="inputs accept-consent">
                                    <input id="consent@(consent.Id)" type="checkbox" name="consent@(consent.Id)" checked="@consent.Accepted" />
                                    <label for="consent@(consent.Id)">@consent.Message</label>
                                </div>
                            }

                        }
                    </div>
                </div>
            }
            <div class="buttons">
                <input type="submit" id="register-button" class="button-1 register-next-step-button btn btn-default" value="@T("Account.Register.Button")" name="register-button" />
            </div>
        </form>
        <div class="external-authentication">
            @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
        </div>
    </div>
</div>
