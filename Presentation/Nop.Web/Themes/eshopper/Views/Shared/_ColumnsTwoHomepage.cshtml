@{
    Layout = "_Root";
}
@{
    //current category ID
    int currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    int currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    int currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}

<div class="container silde-show-container">
    <div class="row">
        <div class="col-lg-12">
            @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_top" })
        </div>
    </div>
</div>
<div class="space15px"></div>
<div class="container">
    <div class="row">
        <div class="col-lg-3 col-md-4 col-sm-4 hidden-xs">
            <div class="left-sidebar">
                @if (IsSectionDefined("left"))
                {
                    @RenderSection("left")
                }
                else
                {

                    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
                    @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })
                    @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                    @await Component.InvokeAsync("VendorNavigation")
                    @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
                    @await Component.InvokeAsync("PopularProductTags")
                    @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })

                }
            </div>

        </div>
        <div class="col-lg-9 col-md-8 col-sm-8 col-xs-12 padding-right">
            @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })
            @RenderBody()
            @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })
        </div>
                
    </div>
</div>

