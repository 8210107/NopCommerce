@model TopMenuModel

<div class="navbar  category-menu" role="navigation">
    <div class="container">
        <div class="row">
            <div class="col-lg-10">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".category-navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                </div>
                <div class="collapse navbar-collapse category-navbar-collapse mainmenu">
                    <ul class="nav navbar-nav">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })
                        @if (Model.DisplayHomepageMenuItem)
                        {
                            <li>
                                <a href="@Url.RouteUrl("HomePage")"><span class="glyphicon glyphicon-home"></span></a>
                            </li>
                        }

                        @{
                            var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
                        }
                        @foreach (var category in rootCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                            {
                                Category = category
                            };
                            @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                        }
                        @foreach (var topic in Model.Topics)
                        {
                            <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                        }
                        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
                        {
                            <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                        }
                        @if (Model.DisplayProductSearchMenuItem)
                        {
                            <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
                        }
                        @if (Model.DisplayCustomerInfoMenuItem)
                        {
                            <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                        }
                        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
                        {
                            <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                        }
                        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
                        {
                            <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                        }
                        @if (Model.DisplayContactUsMenuItem)
                        {
                            <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })

                    </ul>
                </div><!--/.nav-collapse -->

            </div>
            <div class="col-lg-2">
                @await Component.InvokeAsync("SearchBox")
            </div>
        </div>
    </div>
</div>


<script type="text/javascript" asp-location="Footer">
    $(document).ready(function () {
        $('.navbar a.dropdown-toggle').on('click', function (e) {
            var elmnt = $(this).parent().parent();
            if (!elmnt.hasClass('nav')) {
                var li = $(this).parent();
                var heightParent = parseInt(elmnt.css('height').replace('px', '')) / 2;
                var widthParent = parseInt(elmnt.css('width').replace('px', '')) - 10;

                if (!li.hasClass('open')) li.addClass('open')
                else li.removeClass('open');
                $(this).next().css('top', heightParent + 'px');
                $(this).next().css('left', widthParent + 'px');

                return false;
            }
        });
    });

    function setMouseHoverDropdown() {
        if ($(window).innerWidth() > 767) {
            $('ul.nav li').hover(function () {
                $(this).find('> .dropdown-menu').stop(true, true).delay(200).fadeIn(500);
            }, function () {
                $(this).find('> .dropdown-menu').stop(true, true).delay(200).fadeOut(500);
            });
        }
    }
    $(window).load(function () {
        setMouseHoverDropdown();
    });
    $(document).ready(function () {
        setMouseHoverDropdown();
    });
    $(window).resize(function () {
        setMouseHoverDropdown();
    });

    $(document).ready(function () {
        $(".navbar-toggle").click(function () {
            $(this).parent().find("> .navbar-header").css("overflow-y", "auto");
        });
    });

    $(function () {
        // Call stylesheet init so that all stylesheet changing functions
        // will work.
        //$.stylesheetInit();

        // This code loops through the stylesheets when you click the link with
        // an ID of "toggler" below.
        $('#toggler').bind(
            'click',
            function (e) {
                $.stylesheetToggle();
                return false;
            }
        );

        // When one of the styleswitch links is clicked then switch the stylesheet to
        // the one matching the value of that links rel attribute.
        $('.styleswitch').bind(
            'click',
            function (e) {
                $.stylesheetSwitch(this.getAttribute('rel'));
                return false;
            }
        );


        $("#configure-button").on("click", function (e) {
            e.preventDefault();
            if ($(this).data("expanded") == "true") {
                $("#color-options").css({ right: '-200px' });
                $("#configure-button").css({ right: '0px' });
                $(this).data("expanded", "false");
            } else {
                $("#color-options").css({ right: '0px' });
                $("#configure-button").css({ right: '200px' });
                $(this).data("expanded", "true");
            }

        });


    });
</script>